package microServiceDesign;

public class MicroServiceDesign {
/**
 * 一、如何构建微服务
1.松耦合：
	修改一个服务不需要另外一个服务，独立部署并修改单个服务不需要修改系统其它部分，过度通信可能导致紧耦合。
2.高内聚：
	将相关行为放在一起，，如果希望修改一个行为最好在一个地方进行修改，然后尽快发布。找到问题域边界就可以确保行为放在同一个地方，并且和其他边界松耦合的通信。
3.界限上下文：
	任何一个给定的领域都有包含多个界限上下文。每个上下文的东西都包含两部分，一部分不需要与外部通信，另一部分需要。每个上下文都有明确的接口，这些接口决定了它会暴露哪些模型给其他上下文。
	想要从一个界限上下文中获取信息，或者向其它发起请求，需要使用模型和其它的显示边界进行通信。
二、集成
1.集成技术;
	SOAP/XML-RPC/REST/Protocol Buffers
2.避免破坏性：
	比如在一个微服务中添加了一个字段，消费者不应该受到影响。
3.保证API技术无关性
	不应该选取对微服务具体实现技术有限制的集成方式。
4.隐藏内部实现：
	不要讲消费方和服务内部细节绑定在一起。
5.是否共享数据库：
	建议不使用，不要将内部暴露给消费方
6.编排与协同：在考虑具体实现时有两种架构风格可以采用，编排和协同。
	编排：我们会依赖某个中心大脑来驱动整个流程，这样的缺点是客户服务作为中心控制枢纽以及很多逻辑的起点，会导致少量的上帝服务，而与其打交道的服务沦为贫血基于CURD的服务。
	协同：从服务异步的方式出发一个事件，其他依赖事件订阅这些事件并作出相应的处理，其可以显著的消除耦合，缺点是不会有很明显的业务流程。这样需要一些额外工作来监控流程，以保证正确的进行。需要建立构建	  一个与业务流程匹配的监控系统，实际监控活动是针对每个微服务的，最终要将监控的结果映射到业务流程中。
7.远程调用
	远程调用容许进行一个本地调用，但实际结果是由某个远程服务器产生的。RPC种类繁多，不同的技术栈可以通过接口定义轻松的产生客户端和服务端的代码。
	问题：某些RPC技术耦合性、脆弱性
	注意：不要对远程过度抽象，以至于网络因素被完全隐藏起来／确保服务端独立部署
8.REST：
	REST架构风格申明了一组对所有资源的标准方法，对于需要低延迟的通信并不是最好的选择
9.DRY：
	DRY指的是避免系统运行和知识重复，在微服务可以适当违反DRY原则避免过度耦合，在单个服务内不要违反DRY原则。
10.postel 法则（伯斯塔尔法则）
	伯斯塔尔法则有点像人类社会中的一个社交原则，“对自己严格，对他人宽容”，能够做到这个原则的人，相信人人都愿意和他交朋友，而能够做到伯斯塔尔法则的软件程序也是人人都喜欢用的，该法则认为系统中每个模块都必须宽进严出，对自己发送的东西必须要严格，对接受的东西则要宽容。
11.将用户界面视为一个组合层
12.绞杀着模式：
	捕获并拦截对老系统的调用，进行路由，完成新老系统替换。
三、分解单块系统：
	接缝：从接缝处可以抽取相对独立的一段代码，对这部分代码修改不会影响其他部分。识别出接缝可以清理代码库，并且可以确定服务的边界。
	事物：补偿事物／最终一致性
四、监控
1.日志：
	logstash：可以解析多种日志文件格式，并将他们发送给下游系统进一步调查。
	Kibana：是一个基于ES的查看日志系统，可以搜索日志。
2.关联标识：
	在触发第一个调用的时候生成一个GUID，然后把它传递给后续调用，类似日志级别和日期，可以将关联标识以结构化的方式些进日志，使用合适的日志聚合工具，对系统触发的调用进行追踪
	传递关联标识时需要保持一致性，这是使用共享的、薄客户端的一个强烈信号，如果使用HTTP作为通信协议，只需要包装标准的HTTP客户端库，添加代码确保在HTTP头传递即可。
3.级别
	监控系统之间的集成点非常关键，每个服务实例都应该追踪和显示其下游服务的健康状态，从数据库到其他合作服务，可以使用库实现一个断路器网络调用，以帮助更优雅的处理级联故障和功能降级，例如Hystrix
4.标准化
	尝试以标准的形式记录日志。
五.安全
1.服务间的身份验证和授权
	在边界内允许一切：边界内对任何调用都是可信的，最多使用https
2.使用SAML或OpeanId Connect
3.客户端证书
4.API密钥
六。康威定理和系统设计
	1.任何组织在设计一套系统时，所交付的设计方案结构上都与该组织的沟通结构保持一致，组织的耦合度越低其创建的系统模块化就越好，耦合度越低
七.规模化微服务
	1.功能降级
	2.幂等
	3.超时
	4.断路器
	5.舱壁
	6.隔离
	7.扩展
	8.CAP定理
		一致性、可用性、分区容忍性
		牺牲一致性：AP系统：容易扩展，构建简单，不要接受失效数据
		牺牲可用性：CP系统：这种情况必须考虑功能降级
	9.服务发现
	10.服务注册
八.总结
1.自治的小服务：
	1.围绕业务建模
	2.自动化文化
	3.隐藏内部实现
	4.一切去中心化
	5.独立部署
	6.隔离失败
	7.高度可观察
 */
}
