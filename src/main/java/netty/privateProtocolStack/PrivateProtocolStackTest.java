package netty.privateProtocolStack;

public class PrivateProtocolStackTest {

	/**
	 * 1.Netty协议栈客户端发送握手请求消息，携带节点ID等有效等身份认证消息
	 * 2.Netty协议栈服务端对握手请求的合法性校验，包括节点ID有效性校验／节点重复登陆校验／IP地址合法校验，校验通过后返回登陆成功握手应答消息。
	 * 3.链路建立后，客户端发送业务消息。
	 * 4.链路建立成功后，服务端发送心跳消息。
	 * 5.链路建立成功后，客户端发送心跳消息。
	 * 6.链路建立成功后，服务端发送业务消息。
	 * 7.服务端退出时，服务端关闭连接，客户端感知对方关闭链接后，被动关闭客户端链接。
	 * 
	 * Netty消息包括：
	 * 		Header：
	 * 			类型：Header
	 * 			长度：变长
	 * 		body:
	 * 			类型：Object
	 * 			长度：变长
	 * 			
	 * Header：
	 * 		1.crcCode：netty消息的校验码，crcCode = 0xABEF + 主版本号 + 次版本号
	 * 			（1）0xABEF：固定值，表明时netty协议消息，2个字节
	 * 			（2）主版本号：1-255，1个字节
	 * 			（3）次版本号：1-255，1个字节
	 * 
	 * 		2.length：整型int，消息长度32，整个消息包括消息头和消息体
	 * 		3.sessionID：长类型long，长度64，集群节点内全剧唯一，由会话ID生成器生成。
	 * 		4.type：类型Byte，长度为8
	 * 			（1）0:业务请求消息
	 * 			（2）1:业务响应消息
	 * 			（3）2.业务ONE WAY消息（即是请求又是响应消息）
	 * 			（4）3.握手请求信息
	 * 			（5）4.握手应答消息
	 * 			（6）5.心跳请求消息
	 * 			（7）6.心跳应答消息
	 * 		5.priority：类型Byte，长度8，消息优先级0-255
	 * 		6.attachment：类型Map<String,Object>,可选字段，用于扩展。
	 * 
	 * 
	 * 
	 * 链路的建立：
	 * 		Netty协议栈支持服务端和客户端，对于使用Netty协议栈的应用程序而言，不需要可以区分到底是客户端还是服务端，在分布式网络环境中，一个节点可以是服务端也可以是客户端。
	 * 		考虑到安全，链路建立需要通过基于IP地址或者号段黑白名单认证机制（在实际项目中安全认证机制会更加严格，例如通过密钥对对用户名密码进行安全认证）
	 * 			
	 */
}
