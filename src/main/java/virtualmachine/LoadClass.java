package virtualmachine;

public class LoadClass {

	//类从被加载到虚拟机开始到内存中，到卸载出内存中为止，它的生命周期包括：
	//加载、验证、初始化和卸载这5部分的顺序是确定的，类加载的过程按照这种顺序进行。解析的过程不一定，在某些情况下可以在初始化之后进行（动态绑定）
	
	//1：加载
		//加载过程中要完成一下三件事
			//1.同过一个类的全限定名来获取此类的二进制字节流
			//2.将这个字节流代表的静态存储结构转化为方法区的运行时数据结构
			//3.在内存中生成一个代表这个类的java.lang.class对象，作为方法区这个类的各种数据的访问入口
			//4.加载完成后，虚拟机外部的二进制字节流按照虚拟机所需的格式存储在方法区之中，然后在内存中实列化一个java.lang.class类的对象，这个对象作为程序访问方法区中这些类型数据的外部接口。
	//2:验证
		//1.文件格式验证：基于二进制字节流验证 版本号、java类型信息要求
		//2.元数据验证：语义检验 是否有父类、是否继承了不允许继承的类（final修饰）。。。。
		//3.字节码验证：通过数据流和控制流分析，确定语义合法、符合逻辑
		//4.符号引用验证：虚拟机将符号引用转化为直接引用时，对类自身以外（常量池中各种符号引用）的信息进行匹配行检验，例如：符号引用通过字符串的描述是否能找到对应的类，符号引用中的类、字段、方法的访问性是否可悲当前类访问
	//3:准备
		//为变量分配内存，并设置初始值（不包括实例变量，其是在对象实例化时随着对象一起分配在java堆中）
	//4 解析
		//1.类或接口的解析
		//2.字段解析
		//3.类方法解析
		//4.接口方法解析
	//5 初始化
		//静态语句块中类变量的赋值动作
	//6 使用
	//7 卸载
	//
	
}
