package virtualmachine;
/**
 * 虚拟机执行引擎
 * @author gaobo
 *
 */
public class VirtualMachineExecutionEngine {
//运行时栈帧结构
	//每一个栈帧都包括局部变量表、操作数栈、动态链接、返回地址和一些额外的附加信息，是支持虚拟机方法调用个方法执行的数据结构与
	//栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了，并且写入到方发表中code属性中，因此一个栈帧需要分配多少内存不会受到程序运行期变量的数据影响，仅取决于虚拟机的实现
	//一个线程的方法调用链可能很长，只有位于栈顶的栈帧是有效的
	
		//1.局部变量表
				//局部变量的容量是以变量曹solt为最小单位。虚拟机没有指定一个solt的大小，一个solt可以存放一个基本类型（32位）（外加对象引用）或者更小，是线程私有的数据，不会出现同步问题
				//为了节省栈帧的空间，局部变量表中的solt是可以复用的，方法体中定义的变量起作用域不一定会覆盖整个方法体，如果当前字节码的PC计数器已经超过了某个变量的作用域，那么这个sole可以被复用。
		//2.操作数栈
				//操作数栈可以称为操作栈，是一个先进后出的栈，方法刚开始的时候栈是空的，在方法执行的过程中，会有各种字节码指令往操作数栈中写入和提取（出栈和入栈）内容。
		//3.动态链接
				//每个栈帧都包含一个指向运行时常量池中该栈帧所属方法都引用，持有这个引用是为了支持方法调用过程中都动态链接，Class文件都常量池由大量的符号引用这些符号一部分会在类加载阶段或者第一次使用的时候直接引用
				//这种转化称为静态解析，另一部分将在每一次运行期间转化为直接引用，称为动态链接
		//4.方法放回地址
				//程序正常或者异常退出时，都要返回到方法被调用的位置。将当前栈出栈，恢复上层方法的局部变量表和操作数栈，若有返回值压入调用者栈的操作数栈中，调整pc计数器多少值以指向方法调用指令后面的以一条指令。
	
	
	
	
}
